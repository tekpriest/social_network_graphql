package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"
	"math/rand"
	"strings"
	"time"

	"github.com/tekpriest/social-network-graphql/graph/model"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.Register) (*model.User, error) {
	rand := rand.Int()
	user := &model.User{
		ID:            fmt.Sprintf("T%d", rand),
		Email:         strings.ToLower(input.Email),
		Username:      input.Username,
		Password:      input.Password,
		FullName:      input.FullName,
		Avatar:        input.Avatar,
		EmailVerified: new(bool),
		CreatedAt:     time.Now().Format(time.RFC1123),
	}
	return user, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.Login) (*model.Auth, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// Profile is the resolver for the profile field.
func (r *mutationResolver) Profile(ctx context.Context, input model.AuthToken) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Profile - profile"))
}

// VerifyAccount is the resolver for the verifyAccount field.
func (r *mutationResolver) VerifyAccount(ctx context.Context, input model.EmailToken) (*model.User, error) {
	panic(fmt.Errorf("not implemented: VerifyAccount - verifyAccount"))
}

// UpdateAccount is the resolver for the updateAccount field.
func (r *mutationResolver) UpdateAccount(ctx context.Context, input model.Update) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateAccount - updateAccount"))
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: CreatePost - createPost"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
